---
- name: Full Teardown: Clean EC2 App and Delete AWS Infrastructure
  hosts: localhost
  gather_facts: false

  vars:
    region: us-east-1
    instance_name: FullStackEC2
    security_group_name: EC2SecurityGroup
    vpc_name: MyVPC

  tasks:

    - name: Get EC2 instance info by tag name
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ instance_name }}"
      register: ec2_info

    - name: Set EC2 instance IP and ID
      set_fact:
        instance_id: "{{ ec2_info.instances[0].instance_id }}"
        public_ip: "{{ ec2_info.instances[0].public_ip_address }}"
      when: ec2_info.instances | length > 0

    - name: Add EC2 instance to dynamic inventory for cleanup
      add_host:
        name: ec2host
        ansible_host: "{{ public_ip }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: ~/.ssh/ansiblekey.pem
      when: ec2_info.instances | length > 0

- name: Clean Apache and app from EC2
  hosts: ec2host
  become: yes
  gather_facts: false
  tasks:
    - name: Stop Apache
      service:
        name: apache2
        state: stopped

    - name: Remove app directory
      file:
        path: /var/www/html/sagarapp
        state: absent

    - name: Remove Apache config
      file:
        path: /etc/apache2/sites-available/sagarapp.conf
        state: absent

    - name: Disable site
      command: a2dissite sagarapp.conf
      ignore_errors: yes

    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

- name: Delete AWS resources after cleaning EC2
  hosts: localhost
  gather_facts: false
  tasks:

    - name: Terminate EC2 instance
      amazon.aws.ec2_instance:
        instance_ids: "{{ instance_id }}"
        region: "{{ region }}"
        state: absent
      when: instance_id is defined

    - name: Get VPC info by name
      amazon.aws.ec2_vpc_net_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ vpc_name }}"
      register: vpc_info

    - name: Set VPC ID
      set_fact:
        vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
      when: vpc_info.vpcs | length > 0

    - name: Get subnets in the VPC
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: subnet_info

    - name: Get route tables in the VPC
      amazon.aws.ec2_vpc_route_table_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: route_table_info

    - name: Get internet gateways in the VPC
      amazon.aws.ec2_vpc_igw_info:
        region: "{{ region }}"
        filters:
          attachment.vpc-id: "{{ vpc_id }}"
      register: igw_info

    - name: Delete security group
      amazon.aws.ec2_group:
        name: "{{ security_group_name }}"
        region: "{{ region }}"
        state: absent
        purge_rules: true
      ignore_errors: true

    - name: Detach and delete internet gateway
      amazon.aws.ec2_vpc_igw:
        igw_id: "{{ igw_info.internet_gateways[0].id }}"
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        state: absent
      when: igw_info.internet_gateways | length > 0
      ignore_errors: true

    - name: Delete route tables
      amazon.aws.ec2_vpc_route_table:
        route_table_id: "{{ item.route_table_id }}"
        region: "{{ region }}"
        state: absent
      loop: "{{ route_table_info.route_tables }}"
      ignore_errors: true

    - name: Delete subnets
      amazon.aws.ec2_vpc_subnet:
        subnet_id: "{{ item.subnet_id }}"
        region: "{{ region }}"
        state: absent
      loop: "{{ subnet_info.subnets }}"
      ignore_errors: true

    - name: Delete VPC
      amazon.aws.ec2_vpc_net:
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        state: absent
      ignore_errors: true
