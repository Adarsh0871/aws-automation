pipeline {
    agent any

    parameters {
        string(name: 'requestId',   defaultValue: 'REQ0012345',   description: 'Unique Request ID')
        string(name: 'env',         defaultValue: 'dev,       description: 'Target Environment')
        string(name: 'templateName',defaultValue: 'launch_ec2',description: 'Ansible Template Name')
        string(name: 'callbackUrl', defaultValue: '',          description: 'Callback URL (required)')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
    }

    stages {
        stage('Pre-check Callback URL') {
            steps {
                script {
                    if (!callbackUrl?.trim()) {
                        error "❌ callbackUrl is missing. Stopping pipeline."
                    }
                }
            }
        }

        stage('Checkout Repo') {
            steps {
                git branch: 'main', url: 'https://github.com/chsagar001/aws-automation.git'
            }
        }

        stage('Verify Ansible & AWS Collection') {
            steps {
                sh '''
                ansible --version
                ansible-galaxy collection list | grep amazon.aws || echo "amazon.aws not found!"
                '''
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                withEnv([
                    "ANSIBLE_COLLECTIONS_PATHS=${env.HOME}/.ansible/collections:/usr/share/ansible/collections",
                    "AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}",
                    "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}"
                ]) {
                    sh """
                    ansible-playbook -i localhost, ${templateName}.yml \
                        -e env=${env} \
                        -e request_id=${requestId} \
                        -e callback_url=${callbackUrl}
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ AWS provisioning successful for requestId: ${requestId}"

            withCredentials([usernamePassword(credentialsId: 'snow-creds', usernameVariable: 'SN_USER', passwordVariable: 'SN_PASS')]) {
                sh '''
                curl -s -u "$SN_USER:$SN_PASS" -X POST \
                  -H "Content-Type: application/json" \
                  -d "{
                        \\"requestId\\": \\"'$requestId'\\",
                        \\"templateName\\": \\"'$templateName'\\",
                        \\"env\\": \\"'$env'\\",
                        \\"status\\": \\"SUCCESS\\"
                      }" \
                  "$callbackUrl"
                '''
            }
        }

        failure {
            echo "❌ AWS provisioning failed for requestId: ${requestId}"

            withCredentials([usernamePassword(credentialsId: 'snow-creds', usernameVariable: 'SN_USER', passwordVariable: 'SN_PASS')]) {
                sh '''
                curl -s -u "$SN_USER:$SN_PASS" -X POST \
                  -H "Content-Type: application/json" \
                  -d "{
                        \\"requestId\\": \\"'$requestId'\\",
                        \\"templateName\\": \\"'$templateName'\\",
                        \\"env\\": \\"'$env'\\",
                        \\"status\\": \\"FAILED\\"
                      }" \
                  "$callbackUrl"
                '''
            }
        }
    }
}
